rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    function isTeacher() {
      return request.auth.token.role == 'teacher' || isAdmin();
    }
    
    function isValidUser() {
      return request.auth.token.role in ['learner', 'teacher', 'admin'];
    }
    
    function isValidImageFile() {
      return resource.contentType.matches('image/.*');
    }
    
    function isValidAudioFile() {
      return resource.contentType.matches('audio/.*');
    }
    
    function isValidVideoFile() {
      return resource.contentType.matches('video/.*');
    }
    
    function isValidFileSize(maxSizeBytes) {
      return resource.size <= maxSizeBytes;
    }
    
    // User profile pictures
    match /users/{userId}/avatar/{fileName} {
      allow read: if isAuthenticated() && isValidUser();
      allow write: if isAuthenticated() && isOwner(userId) && 
                      isValidImageFile() && 
                      isValidFileSize(5 * 1024 * 1024); // 5MB limit
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // User uploaded content (assignments, recordings, etc.)
    match /users/{userId}/content/{fileName} {
      allow read: if isAuthenticated() && (isOwner(userId) || isTeacher());
      allow write: if isAuthenticated() && isOwner(userId) && 
                      (isValidAudioFile() || isValidImageFile() || isValidVideoFile()) &&
                      isValidFileSize(50 * 1024 * 1024); // 50MB limit
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Language learning content (audio pronunciations, images, etc.)
    match /languages/{languageId}/audio/{fileName} {
      allow read: if isAuthenticated() && isValidUser();
      allow write: if isTeacher() && 
                      isValidAudioFile() && 
                      isValidFileSize(10 * 1024 * 1024); // 10MB limit
      allow delete: if isAdmin();
    }
    
    match /languages/{languageId}/images/{fileName} {
      allow read: if isAuthenticated() && isValidUser();
      allow write: if isTeacher() && 
                      isValidImageFile() && 
                      isValidFileSize(5 * 1024 * 1024); // 5MB limit
      allow delete: if isAdmin();
    }
    
    // Lesson content (videos, audio, documents)
    match /lessons/{lessonId}/content/{fileName} {
      allow read: if isAuthenticated() && isValidUser();
      allow write: if isTeacher() && 
                      (isValidAudioFile() || isValidImageFile() || isValidVideoFile()) &&
                      isValidFileSize(100 * 1024 * 1024); // 100MB limit for lesson content
      allow delete: if isAdmin();
    }
    
    // Exercise content
    match /exercises/{exerciseId}/content/{fileName} {
      allow read: if isAuthenticated() && isValidUser();
      allow write: if isTeacher() && 
                      (isValidAudioFile() || isValidImageFile()) &&
                      isValidFileSize(20 * 1024 * 1024); // 20MB limit
      allow delete: if isAdmin();
    }
    
    // Community content (forum attachments, etc.)
    match /community/{postId}/attachments/{fileName} {
      allow read: if isAuthenticated() && isValidUser();
      allow write: if isAuthenticated() && isValidUser() && 
                      (isValidImageFile() || isValidAudioFile()) &&
                      isValidFileSize(10 * 1024 * 1024); // 10MB limit
      allow delete: if isAuthenticated() && 
                       (request.auth.uid == resource.metadata.uploaderId || isAdmin());
    }
    
    // App assets and static content (public read)
    match /app-assets/{fileName} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Backup and export files (admin only)
    match /backups/{fileName} {
      allow read, write, delete: if isAdmin();
    }
    
    match /exports/{userId}/{fileName} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if isAdmin();
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Temporary uploads (auto-deleted after 24 hours)
    match /temp/{userId}/{fileName} {
      allow read, write: if isAuthenticated() && isOwner(userId) &&
                            isValidFileSize(20 * 1024 * 1024); // 20MB limit
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // AI generated content (chatbot responses with images, etc.)
    match /ai-content/{sessionId}/{fileName} {
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.metadata.userId || isAdmin());
      allow write: if isAdmin(); // Only server can write AI content
      allow delete: if isAdmin();
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}